apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

static def releaseTime() {
    return new Date().format("MMdd", TimeZone.getTimeZone("UTC"))
}

def addFieldsAndPlaceholders = { flavor, items ->
    for (def item : items) {
        flavor.buildConfigField "String", item.key, '"' + item.value + '"'
    }
    flavor.addManifestPlaceholders(items)
}

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion project.ANDROID_BUILD_SDK_VERSION as int
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId project.APPLICATION_ID
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION as int
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION as int
        versionName project.VERSION_NAME
        versionCode project.VERSION_CODE as int
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        addFieldsAndPlaceholders(it, [
                APPID_AMAP : APPID_AMAP,
                WEATHER_KEY: WEATHER_KEY,
                FIR_ID   : FIR_API_ID,
                FIR_TOKEN: FIR_API_TOKEN
        ])
        resValue "string", "updatefun_provider_file_authorities", "com.gospell.xs1.app.fileprovider"
        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //apk命名
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "moodsmap-${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
                }
            }
            ndk {
                // 需要将 x86 架构过滤掉
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
            }
            buildConfigField 'Boolean','IS_DEBUG',"false"
        }
        debug {
            minifyEnabled false
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "LittleTurtle-debug-${variant.versionName}-${releaseTime()}.apk"
                }
            }
            ndk {
                // 需要将 x86 架构过滤掉
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
            }
            buildConfigField 'Boolean','IS_DEBUG',"true"
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/kotlin']
        }
    }
    packagingOptions {
        pickFirst 'META-INF/rxjava.properties'
    }
}

ext.okhttpVersion = '3.8.1'
ext.rxJavaVersion = '2.1.2'
ext.rxAndroidVersion = '2.0.1'
ext.rxBindingVersion = '2.0.0'
ext.rxBusVersion = '1.0.5'
ext.retrofitVersion = '2.3.0'
ext.loggerVersion = '2.2.0'
ext.daggerVersion = '2.11'
ext.glideVersion = '4.7.1'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Base MVP
    implementation project(':libs:baseMVP')
    implementation project(':libs:UpdateAppUtils')
    implementation project(':libs:multitem')
    implementation project(':libs:magicindicator')
    implementation project(':libs:spruce')
    implementation project(':libs:multi-image-selector')
    implementation project(':libs:easypopup')
    implementation project(':libs:picture_library')
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Support
    implementation "com.android.support:support-v4:${SUPPORT_LIBRARY}"
    implementation "com.android.support:appcompat-v7:${SUPPORT_LIBRARY}"
    implementation "com.android.support:cardview-v7:${SUPPORT_LIBRARY}"
    implementation "com.android.support:design:${SUPPORT_LIBRARY}"
    implementation "com.android.support.constraint:constraint-layout:${CONSTRAINT_VERSION}"
    implementation 'com.android.support:multidex:1.0.3'

    //RX
    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:${rxBindingVersion}"
    implementation "com.hwangjr.rxbus:rxbus:$rxBusVersion"

    //Network
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"

    //Image loading
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${glideVersion}"
    implementation 'jp.wasabeef:glide-transformations:3.3.0'

    //DI
    implementation "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"

    //Logging
    implementation "com.github.armcha:Logger:${loggerVersion}"

    //Leak canary
//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'

    //amap
    implementation 'com.amap.api:location:3.4.1'
    implementation 'com.amap.api:map2d:5.2.0'

    //premission
    implementation 'com.github.tajchert:nammu:1.2.0'

    //view
    implementation 'com.oguzdev:CircularFloatingActionMenu:1.0.2'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.21'
    implementation 'com.github.ybq:Android-SpinKit:1.1.0'
    implementation 'com.github.zyyoona7:EasyPopup:1.1.1'

    //协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.20'

    // 网页进度条
    implementation 'com.daimajia.numberprogressbar:library:1.4@aar'
    //星星控件
    implementation 'com.github.varunest:sparkbutton:1.0.5'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion SUPPORT_LIBRARY
            }
        }
    }
}